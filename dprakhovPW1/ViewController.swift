//
//  ViewController.swift
//  dprakhovPW1
//
//  Created by –î–∞–Ω–∏–ª –ü—Ä–∞—Ö–æ–≤ on 14.09.2025.
//

import UIKit

final class ViewController: UIViewController {

    // MARK: - Outlets
    @IBOutlet private var colorViews: [UIView]!      // –í—Å–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Å –º–æ–µ–≥–æ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–∞
    @IBOutlet private weak var changeButton: UIButton! // –ö–Ω–æ–ø–∫–∞ "Click It!"

    // MARK: - Properties
    private var updateTimer: Timer?                  // –¢–∞–π–º–µ—Ä –¥–ª—è "—É–¥–µ—Ä–∂–∞–Ω–∏—è" –∫–Ω–æ–ø–∫–∏

    // MARK: - Config (–¥–∞–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö "–º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª", —Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç—É 9)
    private let animationDuration: TimeInterval = 0.35
    private let cornerRadiusRange: ClosedRange<CGFloat> = 0...22
    private let timerInterval: TimeInterval = 0.5

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        // –°–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–∏—Å—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ–±—Ä–µ–∑–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —Ä–∞–¥–∏—É—Å—É)
        colorViews.forEach { $0.layer.masksToBounds = true }

        setupLabelsInViews() // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤–Ω—É—Ç—Ä—å –±–ª–æ–∫–æ–≤

        // –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É: –Ω–∞—á–∞–ª–æ –µ—ë —É–¥–µ—Ä–∂–∫–∏ –∏ –æ—Ç–ø—É—Å–∫
        changeButton.addTarget(self, action: #selector(holdDown), for: .touchDown)
        changeButton.addTarget(self, action: #selector(holdRelease), for: [.touchUpInside, .touchUpOutside])

        // –î–µ–ª–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é "—Ä–∞—Å–∫—Ä–∞—Å–∫—É" –≤—å—é—à–µ–∫
        apply(colors: makeUniqueRandomColors(count: colorViews.count))
    }

    // MARK: - –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —Ü–≤–µ—Ç–Ω—ã—Ö –≤—å—é—à–µ–∫
    /// –ö–ª–∞–¥—ë–º UILabel –≤ –∫–∞–∂–¥—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –∫—Ä–∞—è–º —Å –æ—Ç—Å—Ç—É–ø–æ–º
    private func setupLabelsInViews() {
        for view in colorViews {
            let label = UILabel()
            label.text = "IOS –≠–¢–û –û–ß –ö–†–£–¢–û!"
            label.font = .systemFont(ofSize: 96, weight: .heavy)     // –ë–æ–ª—å—à–æ–π —Ç–æ–ª—Å—Ç—ã–π —à—Ä–∏—Ñ—Ç
            label.textColor = UIColor.white.withAlphaComponent(0.6)  // –ë–µ–ª—ã–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            label.textAlignment = .center
            label.numberOfLines = 0
            label.adjustsFontSizeToFitWidth = true    // –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ –ª–µ–∑–µ—Ç
            label.minimumScaleFactor = 0.1

            view.addSubview(label)
            label.translatesAutoresizingMaskIntoConstraints = false
            NSLayoutConstraint.activate([
                label.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 8),
                label.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -8),
                label.topAnchor.constraint(equalTo: view.topAnchor, constant: 8),
                label.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -8)
            ])
        }
    }

    // MARK: - Actions (—É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏)
    /// –ù–∞–∂–∞–ª–∏ –∏ –¥–µ—Ä–∂–∏–º ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    @objc private func holdDown() {
        updateColors()
        updateTimer = Timer.scheduledTimer(withTimeInterval: timerInterval, repeats: true) { [weak self] _ in
            self?.updateColors()
        }
    }

    /// –û—Ç–ø—É—Å—Ç–∏–ª–∏ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    @objc private func holdRelease() {
        updateTimer?.invalidate()
        updateTimer = nil
    }

    /// –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞/—Ä–∞–¥–∏—É—Å—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –¥–≤–∏–∂–µ–Ω–∏–µ
    private func updateColors() {
        changeButton.isEnabled = false
        let newColors = makeUniqueRandomColors(count: colorViews.count)

        UIView.animate(withDuration: animationDuration, animations: { [weak self] in
            self?.apply(colors: newColors)
        }, completion: { [weak self] _ in
            // –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–π–º–µ—Ä–∞ - —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            if self?.updateTimer == nil {
                self?.changeButton.isEnabled = true
            }
        })

        runEmojiAnimation()
    }

    // MARK: - UI Updates
    /// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã–π cornerRadius –∫–æ –≤—Å–µ–º –≤—å—é—à–∫–∞–º
    private func apply(colors: [UIColor]) {
        guard colors.count == colorViews.count else { return }
        for (view, color) in zip(colorViews, colors) {
            view.backgroundColor = color
            view.layer.cornerRadius = CGFloat.random(in: cornerRadiusRange)
        }
    }

    // MARK: - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ HEX
    private func makeUniqueRandomColors(count: Int) -> [UIColor] {
        var seenColors = Set<String>()     // —Ç—É—Ç —Ö—Ä–∞–Ω–∏–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ HEX
        var resultColor: [UIColor] = []
        while resultColor.count < count {
            let hex = UIColor.randomHex()
            if !seenColors.contains(hex), let c = UIColor(hex: hex) {
                seenColors.insert(hex); resultColor.append(c)
            }
        }
        return resultColor
    }

    // MARK: - –ê–Ω–∏–º–∞—Ü–∏—è: –ø—Ä–æ–ª—ë—Ç —ç–º–æ–¥–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    private func runEmojiAnimation() {
        guard colorViews.count > 1 else { return }

        // –ü—É—Å–∫–∞–µ–º –≤ —Å–¥–≤–∏–≥ 3 —ç–º–æ–¥–∑–∏ –ø–æ —É—Å–ª–æ–≤–Ω—ã–º ¬´–∫–æ—Ä–∏–¥–æ—Ä—á–∏–∫–∞–º¬ª –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –≤—å—é—à–µ–∫
        let emojis = ["üì±", "üë®‚Äçüíª", "üöÄ"]

        // –°—á–∏—Ç–∞–µ–º Y-–ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
        var yPositions: [CGFloat] = []
        for i in 0..<(colorViews.count - 1) {
            let topView = colorViews[i]
            let bottomView = colorViews[i + 1]
            let y = (topView.frame.maxY + bottomView.frame.minY) / 2
            yPositions.append(y)
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        for (index, emoji) in emojis.enumerated() {
            let label = UILabel()
            label.text = emoji
            label.font = .systemFont(ofSize: 50)
            label.frame = CGRect(x: 0, y: 0, width: 60, height: 60)
            view.addSubview(label)

            let y = yPositions[index % yPositions.count]
            let fromLeft = index % 2 == 0
            let startX = fromLeft ? -label.frame.width : view.bounds.width
            let endX = fromLeft ? view.bounds.width : -label.frame.width
            label.center = CGPoint(x: startX, y: y)

            UIView.animate(withDuration: 1.0, delay: Double(index) * 0.2, options: [.curveEaseInOut], animations: {
                label.center.x = endX
            }, completion: { _ in
                label.removeFromSuperview()
            })
        }
    }
}

// MARK: - UIColor <-> HEX (sRGB)
private extension UIColor {
    /// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É "RRGGBB" –∏–ª–∏ "#RRGGBB" –∏ —Å–æ–∑–¥–∞—ë–º —Ü–≤–µ—Ç –≤ sRGB
    convenience init?(hex: String) {
        let cleaned = hex.trimmingCharacters(in: .whitespacesAndNewlines)
                         .replacingOccurrences(of: "#", with: "")
                         .uppercased()
        guard cleaned.count == 6, let value = UInt32(cleaned, radix: 16) else { return nil }
        let r = CGFloat((value >> 16) & 0xFF) / 255
        let g = CGFloat((value >> 8)  & 0xFF) / 255
        let b = CGFloat( value        & 0xFF) / 255
        self.init(red: r, green: g, blue: b, alpha: 1)
    }

    /// –ü—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã–π HEX –≤–∏–¥–∞ "A1B2C3"
    static func randomHex() -> String {
        String(format: "%06X", UInt32.random(in: 0...0xFFFFFF))
    }
}
